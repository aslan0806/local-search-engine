package searchengine.services.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import searchengine.dto.indexing.IndexingResponse;
import searchengine.model.Page;
import searchengine.model.SiteEntity;
import searchengine.model.StatusType;
import searchengine.repositories.PageRepository;
import searchengine.repositories.SiteRepository;
import searchengine.services.IndexingService;
import searchengine.services.indexing.IndexingTask;
import searchengine.services.indexing.SiteCrawler;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class IndexingServiceImpl implements IndexingService {

    private final SiteRepository siteRepository;
    private final PageRepository pageRepository;
    private final SiteCrawler siteCrawler;
    private final IndexingTask indexingTask;

    private volatile boolean isIndexing = false;

    @Override
    public IndexingResponse startIndexing() {
        if (isIndexing) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏");
            return new IndexingResponse(false, "‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
        }

        isIndexing = true;
        log.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤");

        new Thread(() -> {
            for (SiteEntity site : siteRepository.findAll()) {
                if (!isIndexing) break;

                site.setStatus(StatusType.INDEXING);
                site.setStatusTime(LocalDateTime.now());
                site.setLastError(null);
                siteRepository.save(site);

                log.info("üåê –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å–∞–π—Ç–∞: {}", site.getUrl());
                siteCrawler.crawlSite(site);
            }
            isIndexing = false;
            log.info("üèÅ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }).start();

        return new IndexingResponse(true, null);
    }

    @Override
    public IndexingResponse stopIndexing() {
        if (!isIndexing) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏");
            return new IndexingResponse(false, "‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞");
        }

        isIndexing = false;
        log.info("üõë –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        return new IndexingResponse(true, null);
    }

    @Override
    public IndexingResponse indexPage(String url) {
        SiteEntity site = siteRepository.findAll()
                .stream()
                .filter(s -> url.startsWith(s.getUrl()))
                .findFirst()
                .orElse(null);

        if (site == null) {
            log.error("‚õî URL –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: {}", url);
            return new IndexingResponse(false, "‚õî –î–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤");
        }

        String path = url.replace(site.getUrl(), "");

        Optional<Page> oldPage = pageRepository.findByPathAndSite(path, site);
        oldPage.ifPresent(pageRepository::delete);

        try {
            indexingTask.indexPage(site, path);
            log.info("üîÅ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {}", url);
            return new IndexingResponse(true, null);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {}: {}", url, e.getMessage());
            return new IndexingResponse(false, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
}